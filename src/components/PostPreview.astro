---
import { Picture } from "astro:assets"
import dynImportImg from "../util/ohgodpleasehelpme"
import type { CollectionEntry } from "astro:content"

export interface Props {
    post: CollectionEntry<"posts" | "docs">
}

const { post } = Astro.props
---

<style lang="scss">
    a:has(> .post) {
        all: unset;
        cursor: pointer;
        position: relative;
    }

    * {
        margin: 0 !important; // !important here to stop mdx stuf
    }

    p,
    small {
        color: var(--c-subtext1);
        font-style: oblique;
    }

    p:has(small) {
        text-align: right;
    }

    .post {
        --hoverThickness {
        }
        border-radius: 16px;
        padding: 10px 15px;
        background-color: var(--c-background);
        outline: 1px solid transparent;

        overflow: hidden;

        transition-duration: 250ms;
        transition-property: border-left border-right;
        position: relative;

        & img {
            transition-duration: 250ms;
            transition-property: filter, transform;
            position: absolute;
            border-radius: 16px;
            width: 100%;
            /*height: 100%;
            object-fit:cover;*/
            object-fit: contain;
            background-color: var(--c-background);
            filter: opacity(20%) saturate(25%);
            z-index: 0;

            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%) scale(150%) rotate(-12.5deg);

            @media (prefers-reduced-motion) {
                display: none;
            }

            &.topper {
                object-fit: fill;
                filter: opacity(40%);
                transform: translate(-50%, -50%) scale(150%);
                aspect-ratio: 1 / 1;
                height: auto;
            }
        }
        /*
        &:has(.topper) {
            display: flex;
            gap: 15px;
        }*/
    }
    /*
    .topper {
        flex: 0 0 80px;
        height: auto;
        min-width: 0;
        object-fit: contain;
    }*/

    .frontmatter {
        z-index: 1;
        position: relative;
    }

    a:hover > .post,
    a:focus-visible > .post {
        outline: 1px solid #66aaff;
        & img:not(.topper) {
            filter: opacity(45%) saturate(75%);
            transform: translate(-50%, -50%) scale(125%) rotate(-5deg);
        } /*
        & .topper {
            transform: scale(110%);
        }*/
        & .topper {
            filter: opacity(60%);
        }
    }

    a:active > .post {
        outline: 1px solid #66aaff99;
        & img:not(.topper) {
            filter: opacity(55%) saturate(100%);
            transform: translate(-50%, -50%) scale(100%) rotate(0deg);
        }
        & .topper {
            filter: opacity(50%);
        }
    }

    a:focus-visible > .post {
        outline: 3px solid var(--c-subtext1);
    }

    @media (prefers-reduced-motion) {
        .post img {
            transform: translate(-50%, -50%) scale(100%) !important;
        }
    }
</style>
<a
    href={`/${post.collection == "posts" ? "blog" : post.collection}/${post.slug}`}
>
    <div class="post">
        {
            post.data.image ? (
                "path" in post.data.image ? (
                    <Picture
                        src={dynImportImg(post.data.image.path)}
                        alt={post.data.image.alt}
                        class:list={[{ topper: post.data.image.isTopper }]}
                        formats={["avif", "webp"]}
                        /* pseudo-blur */
                        {...(post.data.image.isTopper ? {width: 10, height: 3} : { width: 750 })}
                    />
                ) : (
                    // need to repeat myself here otherwise astro dies
                    <img
                        src={
                            "url" in post.data.image ? post.data.image.url : ""
                        }
                        alt={post.data.image.alt}
                        class:list={[{ topper: post.data.image.isTopper }]}
                    />
                )
            ) : (
                ""
            )
        }

        <div class="frontmatter">
            <h3>{post.data.title}</h3>
            <p>
                {post.data.description}
            </p>
            {
                post.data.pubDate ? (
                    <p>
                        <small>
                            {
                                new Date(post.data.pubDate)
                                    .toISOString()
                                    .split("T")[0]
                            }
                        </small>
                    </p>
                ) : (
                    ""
                )
            }
        </div>
    </div>
</a>
